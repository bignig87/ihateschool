{
  "version": 3,
  "sources": ["../../../../rammerhead/rhAPI.js"],
  "sourcesContent": ["export class RammerheadAPI {\n  constructor(server, signal, password) {\n    this.server = server\n    this.signal = signal\n    this.password = password\n  }\n  async get(url) {\n    if (this.password) {\n      // really cheap way of adding a query parameter\n      if (url.includes(\"?\")) {\n        url += \"&pwd=\" + this.password\n      } else {\n        url += \"?pwd=\" + this.password\n      }\n    }\n\n    try {\n      const request = await fetch(new URL(url, this.server), {\n        signal: this.signal\n      })\n\n      if (request.status === 200) {\n        return await request.text()\n      } else {\n        throw new Error(\n          `unexpected server response to not match \"200\". Server says \"${await request.text()}\"`\n        )\n      }\n    } catch (err) {\n      console.error(err)\n      throw new Error(\"Cannot communicate with the server\")\n    }\n  }\n  async needPassword() {\n    return (await this.get(\"needpassword\")) === \"true\"\n  }\n  async newSession() {\n    return await this.get(\"newsession\")\n  }\n  async editSession(id, httpProxy, enableShuffling) {\n    const res = await this.get(\n      \"editsession?id=\" +\n        encodeURIComponent(id) +\n        (httpProxy ? \"&httpProxy=\" + encodeURIComponent(httpProxy) : \"\") +\n        \"&enableShuffling=\" +\n        (enableShuffling ? \"1\" : \"0\")\n    )\n\n    if (res !== \"Success\") {\n      throw new Error(`unexpected response from server. received ${res}`)\n    }\n  }\n  async sessionExists(id) {\n    const res = await this.get(\"sessionexists?id=\" + encodeURIComponent(id))\n\n    switch (res) {\n      case \"exists\":\n        return true\n      case \"not found\":\n        return false\n      default:\n        throw new Error(`unexpected response from server. received ${res}`)\n    }\n  }\n  async deleteSession(id) {\n    if (await this.sessionExists(id)) {\n      const res = await this.get(\"deletesession?id=\" + id)\n\n      if (res !== \"Success\" && res !== \"not found\") {\n        throw new Error(`unexpected response from server. received ${res}`)\n      }\n    }\n  }\n  async shuffleDict(id) {\n    const res = await this.get(\"api/shuffleDict?id=\" + encodeURIComponent(id))\n    return JSON.parse(res)\n  }\n}\n\nexport class StrShuffler {\n  baseDictionary =\n    \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz~-\"\n  shuffledIndicator = \"_rhs\"\n  constructor(dictionary) {\n    dictionary ||= this.generateDictionary()\n    this.dictionary = dictionary\n  }\n  mod(n, m) {\n    return ((n % m) + m) % m\n  }\n  generateDictionary() {\n    let str = \"\"\n    const split = this.baseDictionary.split(\"\")\n    while (split.length > 0)\n      str += split.splice(Math.floor(Math.random() * split.length), 1)[0]\n\n    return str\n  }\n  shuffle(str) {\n    if (str.startsWith(this.shuffledIndicator)) return str\n    let shuffledStr = \"\"\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charAt(i)\n      const idx = this.baseDictionary.indexOf(char)\n      if (char === \"%\" && str.length - i >= 3) {\n        shuffledStr += char\n        shuffledStr += str.charAt(++i)\n        shuffledStr += str.charAt(++i)\n      } else if (idx === -1) shuffledStr += char\n      else\n        shuffledStr += this.dictionary.charAt(\n          this.mod(idx + i, this.baseDictionary.length)\n        )\n    }\n    return this.shuffledIndicator + shuffledStr\n  }\n  unshuffle(str) {\n    if (!str.startsWith(this.shuffledIndicator)) return str\n\n    str = str.slice(this.shuffledIndicator.length)\n\n    let unshuffledStr = \"\"\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charAt(i)\n      const idx = this.dictionary.indexOf(char)\n      if (char === \"%\" && str.length - i >= 3) {\n        unshuffledStr += char\n        unshuffledStr += str.charAt(++i)\n        unshuffledStr += str.charAt(++i)\n      } else if (idx === -1) unshuffledStr += char\n      else\n        unshuffledStr += this.baseDictionary.charAt(\n          this.mod(idx - i, this.baseDictionary.length)\n        )\n    }\n    return unshuffledStr\n  }\n}\n\n"],
  "mappings": "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",
  "names": ["RammerheadAPI", "server", "signal", "password", "url", "request", "err", "id", "httpProxy", "enableShuffling", "res", "StrShuffler", "dictionary", "__publicField", "n", "m", "str", "split", "shuffledStr", "i", "char", "idx", "unshuffledStr"]
}
